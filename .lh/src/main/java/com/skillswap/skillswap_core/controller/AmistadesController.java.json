{
    "sourceFile": "src/main/java/com/skillswap/skillswap_core/controller/AmistadesController.java",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1719720616937,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1719720624350,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n         }\r\n     }\r\n \r\n         @GetMapping(\"/usuario/{id}\")\r\n-    public ResponseEntity<List<Amistades>> buscarNotificacionesByIdUsuario(@PathVariable int id) {\r\n+    public ResponseEntity<List<Amistades>> buscarAmistadesByIdUsuario(@PathVariable int id) {\r\n         try {\r\n \r\n             List<Notificaciones> notificaciones = notificacionesService.findByUsuario(usuarioService.findById(id));\r\n             return ResponseEntity.ok(notificaciones);\r\n"
                },
                {
                    "date": 1719720632432,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,9 @@\n import com.skillswap.skillswap_core.entity.Amistades;\r\n import com.skillswap.skillswap_core.entity.Notificaciones;\r\n import com.skillswap.skillswap_core.exceptions.ResourceNotFoundException;\r\n import com.skillswap.skillswap_core.service.AmistadesService;\r\n+import com.skillswap.skillswap_core.service.UsuarioService;\r\n \r\n import lombok.RequiredArgsConstructor;\r\n import org.springframework.web.bind.annotation.RequestMapping;\r\n import org.springframework.web.bind.annotation.RestController;\r\n@@ -29,9 +30,11 @@\n @CrossOrigin(Estandares.CROSS)\r\n public class AmistadesController {\r\n \r\n     private final AmistadesService amistadesService;\r\n+        private final UsuarioService usuarioService;\r\n \r\n+\r\n     @GetMapping\r\n     public ResponseEntity<List<Amistades>> listarAmistades() {\r\n         return ResponseEntity.ok(amistadesService.findAll());\r\n     }\r\n"
                }
            ],
            "date": 1719720616937,
            "name": "Commit-0",
            "content": "package com.skillswap.skillswap_core.controller;\r\n\r\nimport com.skillswap.skillswap_core.constants.Estandares;\r\nimport com.skillswap.skillswap_core.entity.Amistades;\r\nimport com.skillswap.skillswap_core.entity.Notificaciones;\r\nimport com.skillswap.skillswap_core.exceptions.ResourceNotFoundException;\r\nimport com.skillswap.skillswap_core.service.AmistadesService;\r\n\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\nimport java.util.List;\r\nimport java.util.NoSuchElementException;\r\n\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.web.bind.annotation.CrossOrigin;\r\nimport org.springframework.web.bind.annotation.DeleteMapping;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.PathVariable;\r\nimport org.springframework.web.bind.annotation.PostMapping;\r\nimport org.springframework.web.bind.annotation.RequestBody;\r\nimport org.springframework.web.bind.annotation.PutMapping;\r\n\r\n@RestController\r\n@RequestMapping(Estandares.API + \"Amistades\")\r\n@RequiredArgsConstructor\r\n@CrossOrigin(Estandares.CROSS)\r\npublic class AmistadesController {\r\n\r\n    private final AmistadesService amistadesService;\r\n\r\n    @GetMapping\r\n    public ResponseEntity<List<Amistades>> listarAmistades() {\r\n        return ResponseEntity.ok(amistadesService.findAll());\r\n    }\r\n    \r\n    @GetMapping(\"/{id}\")\r\n    public ResponseEntity<Amistades> buscarAmistad(@PathVariable int id) {\r\n        try {\r\n            Amistades amistad = amistadesService.findById(id);\r\n            return ResponseEntity.ok(amistad);\r\n        } catch (NoSuchElementException e) {\r\n            throw new ResourceNotFoundException(\"Objeto con id : \" + id);\r\n        }\r\n    }\r\n\r\n        @GetMapping(\"/usuario/{id}\")\r\n    public ResponseEntity<List<Notificaciones>> buscarNotificacionesByIdUsuario(@PathVariable int id) {\r\n        try {\r\n\r\n            List<Notificaciones> notificaciones = notificacionesService.findByUsuario(usuarioService.findById(id));\r\n            return ResponseEntity.ok(notificaciones);\r\n        } catch (NoSuchElementException e) {\r\n            throw new ResourceNotFoundException(\"Objeto con id : \" + id);\r\n        }\r\n    }\r\n\r\n    @PostMapping\r\n    public ResponseEntity<Amistades> guardarAmistad(@RequestBody Amistades amistad) {\r\n        Amistades nuevaAmistad = amistadesService.saveAmistades(amistad);\r\n        return new ResponseEntity<>(nuevaAmistad, HttpStatus.CREATED);\r\n    }\r\n\r\n    @PutMapping(\"/{id}\")\r\n    public ResponseEntity<Amistades> actualizarAmistad(@PathVariable int id, @RequestBody Amistades newAmistad) {\r\n        validarExistencia(id);\r\n        newAmistad.setAmistadID(id);\r\n        Amistades updatedAmistad = amistadesService.saveAmistades(newAmistad);\r\n        return ResponseEntity.ok(updatedAmistad);\r\n    }\r\n\r\n    @DeleteMapping(\"/{id}\")\r\n    public ResponseEntity<String> eliminarAmistad(@PathVariable int id) {\r\n        validarExistencia(id);\r\n        amistadesService.delteAmistadesById(id);\r\n        String msg = \"Amistad Eliminada : \" + id;\r\n        return ResponseEntity.ok(msg);\r\n    }\r\n\r\n    private void validarExistencia(int id) {\r\n        try {\r\n            amistadesService.findById(id);\r\n        } catch (NoSuchElementException e) {\r\n            throw new ResourceNotFoundException(\"Objeto con id : \" + id);\r\n        }\r\n    }\r\n}\r\n"
        }
    ]
}